{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOAnIa9T8IcDBOT/PziFAUY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sahi-nag/Datatype-and-structures-assignment/blob/main/Untitled5.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ":**THEORY QUESTIONS**"
      ],
      "metadata": {
        "id": "hBkcWq_36BoO"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "no134_0v56oQ"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. What is Object-Oriented Programming (OOP)\n",
        "-> Object-Oriented Programming (OOP) is a programming paradigm based on the concept of \"objects,\" which contain data (attributes) and code (methods). It focuses on principles like encapsulation, inheritance, polymorphism, and abstraction to create reusable and modular code.\n",
        "\n",
        "2. What is a class in OOP?\n",
        "-> A class in OOP is a blueprint or template for creating objects. It defines properties (attributes) and behaviors (methods) that the objects created from it will have.\n",
        "\n",
        "3. What is an object in OOP?\n",
        "-> An object in OOP is an instance of a class. It represents a real-world entity with specific values for the properties defined in the class and can perform actions using its methods.\n",
        "\n",
        "4. What is the difference between abstraction and encapsulation ?\n",
        "-> Abstraction hides the complex implementation details and shows only the essential features to the user. Encapsulation wraps data and methods into a single unit (class) and restricts direct access to some components to protect the integrity of the object.\n",
        "\n",
        "5. What are dunder methods in Python?\n",
        "-> Dunder methods in Python are special methods with double underscores before and after their names (e.g., __init__, __str__). They allow customization of built-in behaviors and enable operator overloading and object initialization.\n",
        "\n",
        "6. Explain the concept of inheritance in OOP?\n",
        "-> Inheritance in OOP allows a class (child or subclass) to inherit properties and methods from another class (parent or superclass). It promotes code reusability and supports hierarchical class structures.\n",
        "\n",
        "7. What is polymorphism in OOP?\n",
        "-> Polymorphism in OOP allows objects of different classes to be treated as objects of a common superclass. It enables the same method name to behave differently based on the object calling it, supporting flexibility and dynamic behavior.\n",
        "\n",
        "8. How is encapsulation achieved in Python?\n",
        "> Encapsulation in Python is achieved by defining class attributes as private (using a leading underscore _ or double underscore __) and controlling access through getter and setter methods. This helps protect data from unauthorized access or modification.\n",
        "\n",
        "9. What is a constructor in Python?\n",
        "-> A constructor in Python is a special method called __init__() that is automatically invoked when a new object is created from a class. It initializes the object's attributes with default or passed values.\n",
        "\n",
        "10. What are class and static methods in Python?\n",
        "-> In Python, a class method is defined with the @classmethod decorator and takes the class as its first argument (cls). It can modify class-level attributes. A static method, defined with the @staticmethod decorator, doesn't take self or cls as its first argument and operates independently of the class or instance, usually performing a task related to the class but not requiring access to instance or class attributes.\n",
        "\n",
        "11. What is method overloading in Python?\n",
        "-> Method overloading in Python refers to defining multiple methods with the same name but different parameters. However, Python doesn't support traditional method overloading like some other languages. Instead, you can achieve similar behavior by using default arguments or variable-length arguments (*args or **kwargs) to handle different input types or numbers of arguments.\n",
        "\n",
        "12. What is method overriding in OOP?\n",
        "-> Method overriding in OOP occurs when a subclass provides its own implementation of a method that is already defined in its superclass. The subclass's version of the method overrides the superclass's version, allowing for specialized behavior in the subclass.\n",
        "\n",
        "13. What is a property decorator in Python?\n",
        "-> The property decorator in Python is used to define a method as a property, allowing you to access it like an attribute, without explicitly calling it as a method. It provides a way to define getter methods that can be accessed as if they were simple attributes, enabling better encapsulation and control over data access.\n",
        "\n",
        "14. Why is polymorphism important in OOP?\n",
        "-> Polymorphism is important in OOP because it allows for flexibility and scalability. It enables a single interface to be used for different data types or objects, reducing code duplication and making the system easier to maintain and extend. This helps in achieving more generic and reusable code.\n",
        "\n",
        "15. What is an abstract class in Python?\n",
        "-> An abstract class in Python is a class that cannot be instantiated directly and is meant to be subclassed. It is defined using the ABC (Abstract Base Class) module and typically contains abstract methods, which are methods without implementation that must be overridden in subclasses. Abstract classes provide a blueprint for other classes.\n",
        "\n",
        "16. What are the advantages of OOP?\n",
        "-> The advantages of OOP include:\n",
        "Modularity: Code is organized into classes and objects, making it easier to manage and maintain.\n",
        "Reusability: Inheritance allows code to be reused across different classes, reducing duplication.\n",
        "Encapsulation: Data and methods are bundled together, and access to data can be controlled, improving security.\n",
        "Scalability and Flexibility: Polymorphism and method overriding allow the system to adapt and scale with minimal changes.\n",
        "\n",
        "17. What is the difference between a class variable and an instance variable?\n",
        "-> A class variable is shared by all instances of a class and is defined within the class but outside any methods. It can be accessed using the class name or any instance of the class.\n",
        "An instance variable, on the other hand, is unique to each instance of a class and is defined inside methods, typically within the __init__ constructor. It can be accessed only through an instance of the class.\n",
        "\n",
        "18. What is multiple inheritance in Python?\n",
        "-> Multiple inheritance in Python occurs when a class inherits from more than one parent class. This allows the subclass to inherit attributes and methods from multiple classes, enabling code reuse and the ability to combine functionalities from different classes. However, it can lead to complexity, especially when there are conflicting method names, which is where the method resolution order (MRO) comes into play.\n",
        "\n",
        "19. Explain the purpose of ‘’__str__’ and ‘__repr__’ ‘ methods in Python?\n",
        "-> The __str__ method in Python is used to return a readable, user-friendly string representation of an object, typically for display purposes (e.g., when using print()).\n",
        "The __repr__ method returns an official string representation of the object, mainly for debugging, and should ideally be unambiguous and, if possible, mimic valid Python code to recreate the object.\n",
        "\n",
        "20. What is the significance of the ‘super()’ function in Python?\n",
        "-> The super() function in Python is used to call methods from a parent or superclass, allowing access to inherited methods without explicitly naming the parent class. It's especially useful in method overriding and multiple inheritance, ensuring proper method resolution and reducing code duplication.\n",
        "\n",
        "21. What is the significance of the __del__ method in Python?\n",
        "-> The __del__ method in Python is a destructor method that is called when an object is about to be destroyed. It is used to perform cleanup tasks like closing files or releasing resources, but its use is generally discouraged due to unpredictable timing of object destruction by the garbage collector.\n",
        "\n",
        "22. What is the difference between staticmethod and classmethod in Python?\n",
        "-> The staticmethod decorator defines a method that doesn't take self or cls as its first argument and can't access or modify class or instance data — it's like a regular function inside a class.\n",
        "The classmethod decorator defines a method that takes cls as its first argument, allowing it to access and modify class-level attributes or create class instances.\n",
        "\n",
        "23. How does polymorphism work in Python with inheritance?\n",
        "-> In Python, polymorphism with inheritance works by allowing a subclass to override methods of its superclass. When a method is called on an object, Python dynamically determines the appropriate version based on the object's class, enabling different behaviors using the same method name across related classes.\n",
        "\n",
        "24. What is method chaining in Python OOP?\n",
        "-> Method chaining in Python OOP is a technique where multiple methods are called on the same object in a single line. This is achieved by having each method return self, allowing the next method to be called directly on the returned object. It improves code readability and fluency.\n",
        "\n",
        "25. What is the purpose of the __call__ method in Python?\n",
        "-> The __call__ method in Python allows an instance of a class to be called like a function. By defining __call__, you can execute custom behavior when the object is \"called,\" making the object behave like a callable.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "On8zv7QB6qPi"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "EBNj5P_w_n6C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Practical Questions**"
      ],
      "metadata": {
        "id": "Xkr6xqm4LF0K"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "0yUfoMPALWzq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dog\n",
        "that overrides the speak() method to print \"Bark!\".\n"
      ],
      "metadata": {
        "id": "Jg1x3wzwLYII"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "t9IZIvwCMfdK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Animal:\n",
        "    def speak(self):\n",
        "        print(\"The animal makes a sound.\")\n",
        "\n",
        "class Dog(Animal):\n",
        "    def speak(self):\n",
        "        print(\"Bark!\")\n"
      ],
      "metadata": {
        "id": "0WyXlxwNMgEq"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cjoy3JaoMs07"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Write a program to create an abstract class Shape with a method area(). Derive classes Circle and Rectangle\n",
        "from it and implement the area() method in both."
      ],
      "metadata": {
        "id": "UgSk02gTM2zP"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NITTcA3mNLrK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from abc import ABC, abstractmethod\n",
        "import math\n",
        "\n",
        "# Abstract class\n",
        "class Shape(ABC):\n",
        "    @abstractmethod\n",
        "    def area(self):\n",
        "        pass\n",
        "\n",
        "# Derived class: Circle\n",
        "class Circle(Shape):\n",
        "    def __init__(self, radius):\n",
        "        self.radius = radius\n",
        "\n",
        "    def area(self):\n",
        "        return math.pi * self.radius ** 2\n",
        "\n",
        "# Derived class: Rectangle\n",
        "class Rectangle(Shape):\n",
        "    def __init__(self, length, width):\n",
        "        self.length = length\n",
        "        self.width = width\n",
        "\n",
        "    def area(self):\n",
        "        return self.length * self.width\n",
        "\n",
        "# Example usage\n",
        "c = Circle(5)\n",
        "r = Rectangle(4, 6)\n",
        "\n",
        "print(f\"Area of Circle: {c.area():.2f}\")\n",
        "print(f\"Area of Rectangle: {r.area()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jOyqwebENMPj",
        "outputId": "1d6904f3-e75a-4222-fff2-da2381550524"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area of Circle: 78.54\n",
            "Area of Rectangle: 24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "um7G4X8eNem5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3.  Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car\n",
        "and further derive a class ElectricCar that adds a battery attribute"
      ],
      "metadata": {
        "id": "NGVzReuNNqIz"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mq1XXgWoNu86"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Base class\n",
        "class Vehicle:\n",
        "    def __init__(self, vehicle_type):\n",
        "        self.type = vehicle_type\n",
        "\n",
        "# Derived class from Vehicle\n",
        "class Car(Vehicle):\n",
        "    def __init__(self, vehicle_type, brand):\n",
        "        super().__init__(vehicle_type)\n",
        "        self.brand = brand\n",
        "\n",
        "# Further derived class from Car\n",
        "class ElectricCar(Car):\n",
        "    def __init__(self, vehicle_type, brand, battery):\n",
        "        super().__init__(vehicle_type, brand)\n",
        "        self.battery = battery\n",
        "\n",
        "    def display_info(self):\n",
        "        print(f\"Type: {self.type}, Brand: {self.brand}, Battery: {self.battery} kWh\")\n",
        "\n",
        "# Example usage\n",
        "e_car = ElectricCar(\"Four-wheeler\", \"Tesla\", 75)\n",
        "e_car.display_info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fgHtRIrvNvgP",
        "outputId": "d4ac4902-ea84-4839-ba6d-785fac5a814c"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Type: Four-wheeler, Brand: Tesla, Battery: 75 kWh\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rMgzf7DMn8pf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Demonstrate polymorphism by creating a base class Bird with a method fly(). Create two derived classes\n",
        "Sparrow and Penguin that override the fly() method."
      ],
      "metadata": {
        "id": "V2-A_nj4oFIg"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5Ljx_G-ioNDg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Base class\n",
        "class Bird:\n",
        "    def fly(self):\n",
        "        print(\"Some birds can fly.\")\n",
        "\n",
        "# Derived class\n",
        "class Sparrow(Bird):\n",
        "    def fly(self):\n",
        "        print(\"Sparrow flies high in the sky.\")\n",
        "\n",
        "# Derived class\n",
        "class Penguin(Bird):\n",
        "    def fly(self):\n",
        "        print(\"Penguins can't fly, but they swim well.\")\n",
        "\n",
        "# Function demonstrating polymorphism\n",
        "def bird_flight(bird):\n",
        "    bird.fly()\n",
        "\n",
        "# Example usage\n",
        "sparrow = Sparrow()\n",
        "penguin = Penguin()\n",
        "\n",
        "bird_flight(sparrow)   # Output: Sparrow flies high in the sky.\n",
        "bird_flight(penguin)   # Output: Penguins can't fly, but they swim well.\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6ljyNJ9KoNnd",
        "outputId": "44c591a0-d50d-407e-95d4-6223d6f94236"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sparrow flies high in the sky.\n",
            "Penguins can't fly, but they swim well.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WFA5jlMkoWBM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Write a program to demonstrate encapsulation by creating a class BankAccount with private attributes\n",
        "balance and methods to deposit, withdraw, and check balance."
      ],
      "metadata": {
        "id": "-pSiKavPoYSa"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GWzJ-dTuol4z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "class BankAccount:\n",
        "    def __init__(self, initial_balance=0):\n",
        "        self.__balance = initial_balance  # private attribute\n",
        "\n",
        "    def deposit(self, amount):\n",
        "        if amount > 0:\n",
        "            self.__balance += amount\n",
        "            print(f\"Deposited: {amount}\")\n",
        "        else:\n",
        "            print(\"Invalid deposit amount.\")\n",
        "\n",
        "    def withdraw(self, amount):\n",
        "        if 0 < amount <= self.__balance:\n",
        "            self.__balance -= amount\n",
        "            print(f\"Withdrew: {amount}\")\n",
        "        else:\n",
        "            print(\"Insufficient funds or invalid amount.\")\n",
        "\n",
        "    def check_balance(self):\n",
        "        print(f\"Current Balance: {self.__balance}\")\n",
        "\n",
        "# Example usage\n",
        "account = BankAccount(1000)\n",
        "account.deposit(500)\n",
        "account.withdraw(300)\n",
        "account.check_balance()\n"
      ],
      "metadata": {
        "id": "5syBnessosrL"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hxxZRyfhpNAf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar\n",
        "and Piano that implement their own version of play()."
      ],
      "metadata": {
        "id": "aJcDts1ipaeA"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wCBr-EoQphI0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Base class\n",
        "class Instrument:\n",
        "    def play(self):\n",
        "        print(\"Playing an instrument.\")\n",
        "\n",
        "# Derived class\n",
        "class Guitar(Instrument):\n",
        "    def play(self):\n",
        "        print(\"Strumming the guitar.\")\n",
        "\n",
        "# Derived class\n",
        "class Piano(Instrument):\n",
        "    def play(self):\n",
        "        print(\"Playing the piano.\")\n",
        "\n",
        "# Function demonstrating runtime polymorphism\n",
        "def start_playing(instrument):\n",
        "    instrument.play()\n",
        "\n",
        "# Example usage\n",
        "g = Guitar()\n",
        "p = Piano()\n",
        "\n",
        "start_playing(g)  # Output: Strumming the guitar.\n",
        "start_playing(p)  # Output: Playing the piano.\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bXRzb5bLphqW",
        "outputId": "75b9066e-8603-42e3-94e3-6fc255b8f1b6"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Strumming the guitar.\n",
            "Playing the piano.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "OMczJcUmpmcA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Create a class MathOperations with a class method add_numbers() to add two numbers and a static\n",
        "method subtract_numbers() to subtract two numbers."
      ],
      "metadata": {
        "id": "no9-d9_ypoDz"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "drGHYj2lptSC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class MathOperations:\n",
        "    @classmethod\n",
        "    def add_numbers(cls, a, b):\n",
        "        return a + b\n",
        "\n",
        "    @staticmethod\n",
        "    def subtract_numbers(a, b):\n",
        "        return a - b\n",
        "\n",
        "# Example usage\n",
        "sum_result = MathOperations.add_numbers(10, 5)\n",
        "diff_result = MathOperations.subtract_numbers(10, 5)\n",
        "\n",
        "print(f\"Sum: {sum_result}\")\n",
        "print(f\"Difference: {diff_result}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BjWF72tyqBr6",
        "outputId": "9edead89-6b3f-40fd-c53b-ede8adf96b58"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sum: 15\n",
            "Difference: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TwS3bjxtqCa_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. Implement a class Person with a class method to count the total number of persons created."
      ],
      "metadata": {
        "id": "7p8c32lJqePN"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hEC2VJJxqkiV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Person:\n",
        "    count = 0  # Class variable to track number of persons\n",
        "\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "        Person.count += 1\n",
        "\n",
        "    @classmethod\n",
        "    def total_persons(cls):\n",
        "        return cls.count\n",
        "\n",
        "# Example usage\n",
        "p1 = Person(\"Alice\")\n",
        "p2 = Person(\"Bob\")\n",
        "p3 = Person(\"Charlie\")\n",
        "\n",
        "print(f\"Total Persons Created: {Person.total_persons()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kkMb1rMuqlDS",
        "outputId": "10ba2419-c1ce-4a94-ee23-d8d756b068de"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total Persons Created: 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "092lhNzvqoCM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "9.  Write a class Fraction with attributes numerator and denominator. Override the str method to display the\n",
        "fraction as \"numerator/denominator\"."
      ],
      "metadata": {
        "id": "z7HVDmX7qsNm"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ppLtES6Yqtt7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Fraction:\n",
        "    def __init__(self, numerator, denominator):\n",
        "        self.numerator = numerator\n",
        "        self.denominator = denominator\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"{self.numerator}/{self.denominator}\"\n",
        "\n",
        "# Example usage\n",
        "f = Fraction(3, 4)\n",
        "print(f)  # Output: 3/4\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h3MXBJ24quhL",
        "outputId": "c14e5c1e-7b64-4a65-bdb5-aef90fa609f4"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3/4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CYQ6sEbpqy-J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Demonstrate operator overloading by creating a class Vector and overriding the add method to add two\n",
        "vectors."
      ],
      "metadata": {
        "id": "k4RJDdcEq0f4"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "p-mDHavAq6ai"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Vector:\n",
        "    def __init__(self, x, y):\n",
        "        self.x = x\n",
        "        self.y = y\n",
        "\n",
        "    def __add__(self, other):\n",
        "        return Vector(self.x + other.x, self.y + other.y)\n",
        "\n",
        "    def __str__(self):\n",
        "        return f\"Vector({self.x}, {self.y})\"\n",
        "\n",
        "# Example usage\n",
        "v1 = Vector(2, 3)\n",
        "v2 = Vector(4, 5)\n",
        "v3 = v1 + v2  # Uses overloaded + operator\n",
        "\n",
        "print(v3)  # Output: Vector(6, 8)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jDoY0Kmoq7dl",
        "outputId": "066e7418-c091-42ac-ea01-b4b83c1ae162"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Vector(6, 8)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qkfjnvezrBCT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. Create a class Person with attributes name and age. Add a method greet() that prints \"Hello, my name is\n",
        "{name} and I am {age} years old.\"\n"
      ],
      "metadata": {
        "id": "BrVNLDisrCjD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Person:\n",
        "    def __init__(self, name, age):\n",
        "        self.name = name\n",
        "        self.age = age\n",
        "\n",
        "    def greet(self):\n",
        "        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n",
        "\n",
        "# Example usage\n",
        "p = Person(\"Sahithi\", 25)\n",
        "p.greet()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B9afE56SrWd_",
        "outputId": "4d9a2779-ac22-476d-8561-4c5e47f3d282"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, my name is Sahithi and I am 25 years old.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LyNoe3D1riTk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. Implement a class Student with attributes name and grades. Create a method average_grade() to compute\n",
        "the average of the grades."
      ],
      "metadata": {
        "id": "iZeVS0cgrnfF"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "g0rQ8gtArrso"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Student:\n",
        "    def __init__(self, name, grades):\n",
        "        self.name = name\n",
        "        self.grades = grades  # List of grades\n",
        "\n",
        "    def average_grade(self):\n",
        "        if self.grades:\n",
        "            return sum(self.grades) / len(self.grades)\n",
        "        else:\n",
        "            return 0\n",
        "\n",
        "# Example usage\n",
        "s = Student(\"Sahithi\", [85, 90, 78, 92])\n",
        "print(f\"{s.name}'s average grade is: {s.average_grade():.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EDysgbkirsJa",
        "outputId": "12fa65ba-6902-40cb-dfe7-2fc1b658e46a"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sahithi's average grade is: 86.25\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Vs7s28DjrwfS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the\n",
        "area."
      ],
      "metadata": {
        "id": "FJKgpUX3ryaZ"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CHglYqnjr7nh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Rectangle:\n",
        "    def __init__(self):\n",
        "        self.length = 0\n",
        "        self.width = 0\n",
        "\n",
        "    def set_dimensions(self, length, width):\n",
        "        self.length = length\n",
        "        self.width = width\n",
        "\n",
        "    def area(self):\n",
        "        return self.length * self.width\n",
        "\n",
        "# Example usage\n",
        "rect = Rectangle()\n",
        "rect.set_dimensions(5, 3)\n",
        "print(f\"Area of the rectangle: {rect.area()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qDF3Df-Vr8So",
        "outputId": "cecedf43-2d5b-460a-c7bb-53449c30431d"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area of the rectangle: 15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. Create a class Employee with a method calculate_salary() that computes the salary based on hours worked\n",
        "and hourly rate. Create a derived class Manager that adds a bonus to the salary."
      ],
      "metadata": {
        "id": "CX2ny0spsFwR"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ekXysefCsCkj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Employee:\n",
        "    def __init__(self, name, hours_worked, hourly_rate):\n",
        "        self.name = name\n",
        "        self.hours_worked = hours_worked\n",
        "        self.hourly_rate = hourly_rate\n",
        "\n",
        "    def calculate_salary(self):\n",
        "        return self.hours_worked * self.hourly_rate\n",
        "\n",
        "# Derived class: Manager\n",
        "class Manager(Employee):\n",
        "    def __init__(self, name, hours_worked, hourly_rate, bonus):\n",
        "        super().__init__(name, hours_worked, hourly_rate)\n",
        "        self.bonus = bonus\n",
        "\n",
        "    def calculate_salary(self):\n",
        "        base_salary = super().calculate_salary()\n",
        "        return base_salary + self.bonus\n",
        "\n",
        "# Example usage\n",
        "employee = Employee(\"John\", 40, 20)\n",
        "manager = Manager(\"Alice\", 40, 25, 500)\n",
        "\n",
        "print(f\"{employee.name}'s salary: ${employee.calculate_salary()}\")\n",
        "print(f\"{manager.name}'s salary: ${manager.calculate_salary()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mCeNPc9SsMdS",
        "outputId": "90bee245-854a-4577-a86c-38020603160c"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "John's salary: $800\n",
            "Alice's salary: $1500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "m83SGBpesS2q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "15. Create a class Product with attributes name, price, and quantity. Implement a method total_price() that\n",
        "calculates the total price of the product."
      ],
      "metadata": {
        "id": "GUeIHTkysZGZ"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TCE03X7Jscdl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Product:\n",
        "    def __init__(self, name, price, quantity):\n",
        "        self.name = name\n",
        "        self.price = price\n",
        "        self.quantity = quantity\n",
        "\n",
        "    def total_price(self):\n",
        "        return self.price * self.quantity\n",
        "\n",
        "# Example usage\n",
        "product = Product(\"Laptop\", 1000, 3)\n",
        "print(f\"Total price of {product.name}: ${product.total_price()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pFp0JenosgKm",
        "outputId": "bd4d548b-6b3e-48f9-e29b-36bcb480bd10"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total price of Laptop: $3000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "16. Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that\n",
        "implement the sound() method."
      ],
      "metadata": {
        "id": "HI5z7N-lsij_"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "7pR0XXVYshNt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from abc import ABC, abstractmethod\n",
        "\n",
        "# Abstract class\n",
        "class Animal(ABC):\n",
        "    @abstractmethod\n",
        "    def sound(self):\n",
        "        pass\n",
        "\n",
        "# Derived class: Cow\n",
        "class Cow(Animal):\n",
        "    def sound(self):\n",
        "        print(\"Moo\")\n",
        "\n",
        "# Derived class: Sheep\n",
        "class Sheep(Animal):\n",
        "    def sound(self):\n",
        "        print(\"Baa\")\n",
        "\n",
        "# Example usage\n",
        "cow = Cow()\n",
        "sheep = Sheep()\n",
        "\n",
        "cow.sound()  # Output: Moo\n",
        "sheep.sound()  # Output: Baa\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HUfIsCXNstVQ",
        "outputId": "1cf1bbb7-79c4-45f3-e564-75c251a8bd69"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Moo\n",
            "Baa\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lEivJlyVsyhN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "17. Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that\n",
        "returns a formatted string with the book's details."
      ],
      "metadata": {
        "id": "LdmrbzeLs0Ns"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "B1_2GxR3s5VS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Book:\n",
        "    def __init__(self, title, author, year_published):\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "        self.year_published = year_published\n",
        "\n",
        "    def get_book_info(self):\n",
        "        return f\"Title: {self.title}\\nAuthor: {self.author}\\nYear Published: {self.year_published}\"\n",
        "\n",
        "# Example usage\n",
        "book = Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960)\n",
        "print(book.get_book_info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gUclp5BGs52t",
        "outputId": "57c7f15b-f8d6-4fef-8de9-d2604dff9bd8"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Title: To Kill a Mockingbird\n",
            "Author: Harper Lee\n",
            "Year Published: 1960\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1E3duhcrtApX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "18. Create a class House with attributes address and price. Create a derived class Mansion that adds an\n",
        "attribute number_of_rooms."
      ],
      "metadata": {
        "id": "TZIrI_D-tDBu"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Hf5Q2XCvtLBa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Base class: House\n",
        "class House:\n",
        "    def __init__(self, address, price):\n",
        "        self.address = address\n",
        "        self.price = price\n",
        "\n",
        "# Derived class: Mansion\n",
        "class Mansion(House):\n",
        "    def __init__(self, address, price, number_of_rooms):\n",
        "        super().__init__(address, price)\n",
        "        self.number_of_rooms = number_of_rooms\n",
        "\n",
        "    def display_details(self):\n",
        "        return f\"Address: {self.address}\\nPrice: ${self.price}\\nNumber of rooms: {self.number_of_rooms}\"\n",
        "\n",
        "# Example usage\n",
        "mansion = Mansion(\"1234 Luxury St, Banjara Hills\", 5000000, 10)\n",
        "print(mansion.display_details())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SAdXdcM1tMH7",
        "outputId": "8933fa46-26f0-405b-add2-5969d98a9268"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Address: 1234 Luxury St, Banjara Hills\n",
            "Price: $5000000\n",
            "Number of rooms: 10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PB9TA2LWtRGx"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
